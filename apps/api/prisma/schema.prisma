generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String               @id @default(uuid())
  email         String               @unique
  createdAt     DateTime             @default(now())
  subs          String[]
  name          String
  organizations OrganizationMember[]
  Application   Application[]
  Account       Account[]
}

model Organization {
  id           String               @id @default(uuid())
  name         String               @unique
  slug         String               @unique
  createdAt    DateTime             @default(now())
  applications Application[]
  invites      OrganizationInvite[]
  members      OrganizationMember[]
  Account      Account[]
}

model OrganizationMember {
  organizationId String
  userId         String
  role           Role
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([organizationId, userId])
}

model OrganizationInvite {
  organizationId String
  createdAt      DateTime     @default(now())
  email          String
  acceptedAt     DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([organizationId, email])
}

model Application {
  id             String        @id @default(uuid())
  name           String        @unique
  creatorId      String
  creator        User          @relation(fields: [creatorId], references: [id])
  createdAt      DateTime      @default(now())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  deployments    Deployment[]
}

model Account {
  id             String        @id @default(uuid())
  user           User?         @relation(fields: [userId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  userId         String?
  organizationId String?
}

model Plan {
  id          String @id @default(uuid())
  name        String @unique
  description String
}

model Chain {
  id          Int          @id
  name        String       @unique
  label       String       @unique
  testnet     Boolean
  enabled     Boolean
  deployments Deployment[]
}

model Region {
  id               String       @id @default(uuid())
  name             String       @unique
  kubeConfigSecret String
  deployments      Deployment[]
  default          Boolean      @unique
}

model Runtime {
  id         String       @id @default(uuid())
  name       String       @unique
  default    Boolean
  Deployment Deployment[]
}

model Deployment {
  id              String           @id @default(uuid())
  application     Application      @relation(fields: [applicationId], references: [id])
  applicationId   String
  createdAt       DateTime         @default(now())
  contractAddress String
  machineSnapshot String
  status          DeploymentStatus
  chain           Chain            @relation(fields: [chainId], references: [id])
  chainId         Int
  region          Region           @relation(fields: [regionId], references: [id])
  regionId        String
  runtime         Runtime          @relation(fields: [runtimeId], references: [id])
  runtimeId       String

  @@unique([applicationId, chainId])
}

enum Role {
  USER
  ADMIN
}

enum DeploymentStatus {
  STARTING
  READY
  FAILED
}
